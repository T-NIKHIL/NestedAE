 --> User provided command line run_dir argument : ../runs/results_for_RL_paper
 --> User provided command line ae argument : 2
 --> Setting global random seed 0.
 --> Running on cpu.
 --> Number of threads : 10
 --> Number of interop threads : 10
 --> PyTorch configurations


 --> Submodule encoder layers :
ModuleList(
  (0): Linear(in_features=12, out_features=10, bias=True)
  (1): ReLU()
)


 --> Submodule predictor layers :
ModuleList(
  (0): Linear(in_features=10, out_features=10, bias=True)
  (1): ReLU()
)


 --> Submodule predictor_ext layers :
ModuleList(
  (0): Linear(in_features=10, out_features=1, bias=True)
  (1): ReLU()
)
 --> Model Compilation step complete.
┏━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━┓
┃   ┃ Name       ┃ Type       ┃ Params ┃
┡━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━┩
│ 0 │ submodules │ ModuleDict │    251 │
└───┴────────────┴────────────┴────────┘
Trainable params: 251                                                                       
Non-trainable params: 0                                                                     
Total params: 251                                                                           
Total estimated model params size (MB): 0                                                   
 --> Example Input : 
{'f1tof4_w_ae1_latent': tensor([-0.7824,  0.4173,  0.2019, -0.1245, -1.6541,  0.9229, -0.4490,  0.2310,
        -0.5154, -1.2063, -0.7939,  1.0829]), 'f5': tensor([-1.2556])}


--> Model Trace : 


 ---------------------------------- 
module_name:encoder
input id:['f1tof4_w_ae1_latent']
input to submodule :
tensor([-0.7824,  0.4173,  0.2019, -0.1245, -1.6541,  0.9229, -0.4490,  0.2310,
        -0.5154, -1.2063, -0.7939,  1.0829])
output id:encoder
output from submodule :
tensor([0.0000, 0.1215, 0.0284, 1.1083, 0.0000, 0.0000, 0.0000, 0.4734, 0.0000,
        0.6453], grad_fn=<ReluBackward0>)
Submodule output dictionary :
{'encoder': tensor([0.0000, 0.1215, 0.0284, 1.1083, 0.0000, 0.0000, 0.0000, 0.4734, 0.0000,
        0.6453], grad_fn=<ReluBackward0>)}
 ---------------------------------- 




 ---------------------------------- 
module_name:predictor
input id:['encoder']
input to submodule :
tensor([0.0000, 0.1215, 0.0284, 1.1083, 0.0000, 0.0000, 0.0000, 0.4734, 0.0000,
        0.6453], grad_fn=<CatBackward0>)
output id:predictor
output from submodule :
tensor([0.1317, 0.0000, 0.9169, 0.0000, 0.0000, 0.6526, 0.3229, 0.0000, 0.1744,
        0.0000], grad_fn=<ReluBackward0>)
Submodule output dictionary :
{'encoder': tensor([0.0000, 0.1215, 0.0284, 1.1083, 0.0000, 0.0000, 0.0000, 0.4734, 0.0000,
        0.6453], grad_fn=<ReluBackward0>),
 'predictor': tensor([0.1317, 0.0000, 0.9169, 0.0000, 0.0000, 0.6526, 0.3229, 0.0000, 0.1744,
        0.0000], grad_fn=<ReluBackward0>)}
 ---------------------------------- 




 ---------------------------------- 
module_name:predictor_ext
input id:['predictor']
input to submodule :
tensor([0.1317, 0.0000, 0.9169, 0.0000, 0.0000, 0.6526, 0.3229, 0.0000, 0.1744,
        0.0000], grad_fn=<CatBackward0>)
output id:predictor_ext
output from submodule :
tensor([0.], grad_fn=<ReluBackward0>)
Submodule output dictionary :
{'encoder': tensor([0.0000, 0.1215, 0.0284, 1.1083, 0.0000, 0.0000, 0.0000, 0.4734, 0.0000,
        0.6453], grad_fn=<ReluBackward0>),
 'predictor': tensor([0.1317, 0.0000, 0.9169, 0.0000, 0.0000, 0.6526, 0.3229, 0.0000, 0.1744,
        0.0000], grad_fn=<ReluBackward0>),
 'predictor_ext': tensor([0.], grad_fn=<ReluBackward0>)}
 ---------------------------------- 


